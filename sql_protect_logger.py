#!/usr/bin/env python3
# sql_protect_logger.py ‚Äì Exemple de protection contre injections SQL
# Copyright (c) 2025 Virginie Lechene
# SPDX-License-Identifier: MIT
# Voir le fichier LICENSE pour plus de d√©tails.
#
# ‚ö†Ô∏è Usage p√©dagogique uniquement.
# L‚Äôauteure d√©cline toute responsabilit√© en cas d‚Äôusage malveillant ou ill√©gal.

import sqlite3
import bcrypt

# Connexion √† la base de donn√©es
conn = sqlite3.connect('database.db')
cur = conn.cursor()

# Simuler des entr√©es utilisateur (√† remplacer par input si besoin)
username = "admin"
password = "password123"

# G√©n√©rer un hash s√©curis√© avec bcrypt (si tu veux stocker un nouveau mot de passe)
hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt())

# V√©rification s√©curis√©e (comparaison entre le mot de passe entr√© et celui stock√© en BDD)
cur.execute("SELECT password_hash FROM users WHERE username = ?", (username,))
row = cur.fetchone()

if row and bcrypt.checkpw(password.encode(), row[0].encode()):
    print("‚úÖ Connexion r√©ussie.")
else:
    print("‚ùå Identifiants invalides.")

# Logs de d√©tection
cur.execute("SELECT * FROM logs")
logs = cur.fetchall()

if logs:
    print("\nüö® Logs de tentatives d√©tect√©es :")
    for log in logs:
        print("IP: {} | User: {} | Payload: {}".format(log[1], log[2], log[4]))

conn.close()
